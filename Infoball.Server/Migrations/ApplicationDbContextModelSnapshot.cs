// <auto-generated />
using System;
using Infoball.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infoball.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Infoball.Server.Data.Entities.LeagueEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Flag")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Logo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Infoball.Server.Data.Entities.SeasonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId", "Year")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Infoball.Server.Data.Entities.StandingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AwayDraws")
                        .HasColumnType("int");

                    b.Property<int>("AwayGoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("AwayGoalsFor")
                        .HasColumnType("int");

                    b.Property<int>("AwayLosses")
                        .HasColumnType("int");

                    b.Property<int>("AwayMatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("AwayWins")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<string>("Form")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("GoalDifference")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("HomeDraws")
                        .HasColumnType("int");

                    b.Property<int>("HomeGoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("HomeGoalsFor")
                        .HasColumnType("int");

                    b.Property<int>("HomeLosses")
                        .HasColumnType("int");

                    b.Property<int>("HomeMatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("HomeWins")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Rank");

                    b.HasIndex("SeasonEntityId");

                    b.HasIndex("TeamId");

                    b.HasIndex("LeagueId", "Season");

                    b.HasIndex("LeagueId", "Season", "TeamId")
                        .IsUnique();

                    b.ToTable("Standings");
                });

            modelBuilder.Entity("Infoball.Server.Data.Entities.TeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Founded")
                        .HasColumnType("int");

                    b.Property<bool>("IsNational")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("League")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Logo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Infoball.Server.Data.Entities.SeasonEntity", b =>
                {
                    b.HasOne("Infoball.Server.Data.Entities.LeagueEntity", "Leagues")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("Infoball.Server.Data.Entities.StandingEntity", b =>
                {
                    b.HasOne("Infoball.Server.Data.Entities.LeagueEntity", "Leagues")
                        .WithMany("Standings")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infoball.Server.Data.Entities.SeasonEntity", null)
                        .WithMany("Standings")
                        .HasForeignKey("SeasonEntityId");

                    b.HasOne("Infoball.Server.Data.Entities.TeamEntity", "Teams")
                        .WithMany("Standings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leagues");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Infoball.Server.Data.Entities.LeagueEntity", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("Standings");
                });

            modelBuilder.Entity("Infoball.Server.Data.Entities.SeasonEntity", b =>
                {
                    b.Navigation("Standings");
                });

            modelBuilder.Entity("Infoball.Server.Data.Entities.TeamEntity", b =>
                {
                    b.Navigation("Standings");
                });
#pragma warning restore 612, 618
        }
    }
}
